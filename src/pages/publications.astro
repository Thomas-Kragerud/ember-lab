---
import BaseLayout from "@layouts/BaseLayout.astro";
import PublicationCard from "@components/cards/PublicationCard.astro";
import { FilterDropdown, FilterPanel } from '@components/filters';
import { getCollection } from 'astro:content';
const title = "Publications";

// Get publications from content collection instead of direct YAML import
const pubCollection = await getCollection('publications');

// Helper function to parse date from string or use fallback
function parseDate(dateStr, fallbackYear) {
  if (!dateStr) return new Date(`${fallbackYear}-01-01`);
  
  try {
    return new Date(dateStr);
  } catch (e) {
    return new Date(`${fallbackYear}-01-01`);
  }
}

// Process publication data
const processedPubs = pubCollection.map(pub => {
  // Get venue information from the collection entry
  const venueAcronym = typeof pub.data.venue === 'object' ? pub.data.venue.acronym : 
                        (typeof pub.data.venue === 'string' ? pub.data.venue.split(' ')[0] : '');
  const venueName = typeof pub.data.venue === 'object' ? pub.data.venue.name : 
                    (typeof pub.data.venue === 'string' ? pub.data.venue : '');
  
  return {
    ...pub.data,
    // Format venue for display
    venueFormatted: venueAcronym && venueName ? `${venueName} (${venueAcronym})` : venueAcronym || venueName,
    // For filtering
    venueAcronym: venueAcronym,
    year: pub.data.year || (pub.data.date ? new Date(pub.data.date).getFullYear() : 2000),
    publicationDate: pub.data.date ? parseDate(pub.data.date, pub.data.year) : parseDate(null, pub.data.year)
  };
});

// Extract all unique venue acronyms for filtering
const allVenues = [...new Set(processedPubs
  .map(pub => pub.venueAcronym)
  .filter(venue => venue !== '')
)];

// Group publications by year and type (preprint vs regular)
const preprints = processedPubs.filter(pub => pub.is_preprint)
  .sort((a, b) => b.publicationDate - a.publicationDate);

const regularPubs = processedPubs.filter(pub => !pub.is_preprint);

// Group regular publications by year
const publicationsByYear = {};
regularPubs.forEach(pub => {
  if (!publicationsByYear[pub.year]) {
    publicationsByYear[pub.year] = [];
  }
  publicationsByYear[pub.year].push(pub);
});

// Sort publications within each year by date (newest first)
Object.keys(publicationsByYear).forEach(year => {
  publicationsByYear[year].sort((a, b) => b.publicationDate - a.publicationDate);
});

// Get years in descending order
const years = Object.keys(publicationsByYear).map(Number).sort((a, b) => b - a);

// Create filter options
const yearOptions = [
  { value: 'all', label: 'All Years' },
  ...years.map(year => ({ value: year.toString(), label: year.toString() }))
];

if (preprints.length > 0) {
  yearOptions.push({ value: 'preprint', label: 'Preprints' });
}

const venueOptions = [
  { value: 'all', label: 'All Venues' },
  ...allVenues.map(venue => ({ value: venue, label: venue }))
];
---

<BaseLayout title={title}>
  <!-- The rest of your HTML remains the same -->
  <div class="max-w-5xl mx-auto px-6 py-12">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-4xl font-bold">Publications</h1>
      
      <!-- Filter Toggle Button -->
      <button id="filter-toggle" class="flex items-center gap-2 px-3 py-1.5 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-sm">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-600 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
        </svg>
        <span>Filters</span>
      </button>
    </div>
    
    <!-- Filter Panel -->
    <FilterPanel id="publication-filters">
      <div class="grid md:grid-cols-2 gap-4" slot="filters">
        <FilterDropdown 
          id="year-filter"
          label="Year"
          options={yearOptions}
        />
        
        <FilterDropdown 
          id="venue-filter"
          label="Venue"
          options={venueOptions}
        />
      </div>
    </FilterPanel>
    
    <!-- Active Filters Display -->
    <div id="active-filters" class="hidden mt-2 mb-8">
      <div class="flex flex-wrap gap-2 items-center">
        <span class="text-sm text-gray-500 dark:text-gray-400">Active filters:</span>
        <div id="filter-badges" class="flex flex-wrap gap-2"></div>
      </div>
    </div>
    
    <!-- Preprints Section (only if preprints exist) -->
    {preprints.length > 0 && (
      <div id="preprints-section" class="mb-12 publication-section" data-year="preprint">
        <h2 class="text-2xl font-semibold mb-6 flex items-center gap-2 text-gray-800 dark:text-gray-200">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-emerald-600 dark:text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>
          Preprints
          <div class="h-px flex-grow bg-gradient-to-r from-emerald-200 to-transparent dark:from-emerald-800 ml-2"></div>
        </h2>
        {preprints.map(pub => (
          <div class="publication-item" data-year="preprint" data-venue={pub.venueAcronym}>
            <PublicationCard publication={{ data: pub }} />
          </div>
        ))}
      </div>
    )}
    
    <!-- Publications by Year -->
    {years.map(year => (
      <div id={`year-${year}`} class="mb-12 publication-section" data-year={year}>
        <h2 class="text-2xl font-semibold mb-6 flex items-center gap-2 text-gray-800 dark:text-gray-200">
          <span class="text-emerald-600 dark:text-emerald-400">{year}</span>
          <div class="h-px flex-grow bg-gradient-to-r from-emerald-200 to-transparent dark:from-emerald-800 ml-2"></div>
        </h2>
        {publicationsByYear[year].map(pub => (
          <div class="publication-item" data-year={year} data-venue={pub.venueAcronym}>
            <PublicationCard publication={{ data: pub }} />
          </div>
        ))}
      </div>
    ))}
    
    <!-- No Results Message -->
    <div id="no-results" class="hidden py-10 text-center">
      <p class="text-lg text-gray-500 dark:text-gray-400">No publications match your filter criteria.</p>
      <button id="clear-filters" class="mt-4 px-4 py-2 bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-200 rounded-md hover:bg-emerald-200 dark:hover:bg-emerald-800 transition-colors">
        Clear Filters
      </button>
    </div>
  </div>
</BaseLayout>

<script>
  // Your original script remains the same
  function initFilters() {
    const filterToggle = document.getElementById('filter-toggle');
    const filterPanel = document.getElementById('publication-filters');
    const yearFilter = document.getElementById('year-filter') as HTMLSelectElement;
    const venueFilter = document.getElementById('venue-filter') as HTMLSelectElement;
    const resetButton = document.getElementById('reset-filters');
    const clearFiltersButton = document.getElementById('clear-filters');
    const activeFilters = document.getElementById('active-filters');
    const filterBadges = document.getElementById('filter-badges');
    const noResults = document.getElementById('no-results');
    
    const publicationItems = document.querySelectorAll<HTMLElement>('.publication-item');
    const publicationSections = document.querySelectorAll<HTMLElement>('.publication-section');
    
    if (!filterToggle) return;
    
    filterToggle.addEventListener('click', () => {
      const isVisible = filterPanel?.classList.contains('scale-y-100');
      
      if (isVisible) {
        filterPanel?.classList.remove('scale-y-100', 'opacity-100', 'h-auto');
        filterPanel?.classList.add('scale-y-0', 'opacity-0', 'h-0');
      } else {
        filterPanel?.classList.remove('scale-y-0', 'opacity-0', 'h-0');
        filterPanel?.classList.add('scale-y-100', 'opacity-100', 'h-auto');
      }
    });
    
    function applyFilters() {
      if (!yearFilter || !venueFilter) return;
      
      const selectedYear = yearFilter.value;
      const selectedVenue = venueFilter.value;
      
      updateFilterBadges(selectedYear, selectedVenue);
      
      publicationSections.forEach(section => {
        section.style.display = 'none';
      });
      
      let visibleCount = 0;
      
      publicationItems.forEach(item => {
        const itemYear = item.dataset.year;
        const itemVenue = item.dataset.venue;
        
        const yearMatch = selectedYear === 'all' || itemYear === selectedYear;
        const venueMatch = selectedVenue === 'all' || itemVenue === selectedVenue;
        
        if (yearMatch && venueMatch) {
          item.style.display = 'block';
          visibleCount++;
          
          const parentSection = item.closest('.publication-section') as HTMLElement;
          if (parentSection) {
            parentSection.style.display = 'block';
          }
        } else {
          item.style.display = 'none';
        }
      });
      
      if (noResults) {
        noResults.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    }
    
    function updateFilterBadges(year: string, venue: string) {
      if (!filterBadges) return;
      
      // Clear existing badges
      filterBadges.innerHTML = '';
      
      // Add year badge if not "all"
      if (year !== 'all') {
        const yearBadge = document.createElement('span');
        yearBadge.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200';
        yearBadge.innerHTML = `
          Year: ${year}
          <button type="button" class="ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full hover:bg-emerald-200 dark:hover:bg-emerald-800 focus:outline-none" data-filter="year">
            <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        `;
        filterBadges.appendChild(yearBadge);
      }
      
      // Add venue badge if not "all"
      if (venue !== 'all') {
        const venueBadge = document.createElement('span');
        venueBadge.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
        venueBadge.innerHTML = `
          Venue: ${venue}
          <button type="button" class="ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800 focus:outline-none" data-filter="venue">
            <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        `;
        filterBadges.appendChild(venueBadge);
      }
      
      // Show/hide the active filters container
      if (activeFilters) {
        activeFilters.style.display = (year === 'all' && venue === 'all') ? 'none' : 'block';
      }
    }
    
    function resetFilters() {
      if (yearFilter) yearFilter.value = 'all';
      if (venueFilter) venueFilter.value = 'all';
      
      // Show all publications
      publicationItems.forEach(item => {
        item.style.display = 'block';
      });
      
      // Show all sections
      publicationSections.forEach(section => {
        section.style.display = 'block';
      });
      
      // Hide filter indicators
      if (activeFilters) activeFilters.style.display = 'none';
      if (noResults) noResults.style.display = 'none';
    }
    
    // Set up event listeners for filter changes
    if (yearFilter) yearFilter.addEventListener('change', applyFilters);
    if (venueFilter) venueFilter.addEventListener('change', applyFilters);
    if (resetButton) resetButton.addEventListener('click', resetFilters);
    if (clearFiltersButton) clearFiltersButton.addEventListener('click', resetFilters);
    
    // Handle clicks on filter badge close buttons
    if (filterBadges) {
      filterBadges.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const closeButton = target.closest('button[data-filter]');
        
        if (closeButton) {
          const filterType = closeButton.getAttribute('data-filter');
          
          if (filterType === 'year') {
            if (yearFilter) yearFilter.value = 'all';
          } else if (filterType === 'venue') {
            if (venueFilter) venueFilter.value = 'all';
          }
          
          applyFilters();
        }
      });
    }
  }
  
  document.addEventListener('DOMContentLoaded', initFilters);
  document.addEventListener('astro:page-load', initFilters);
</script>