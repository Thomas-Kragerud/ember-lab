---
// NewsSection.astro
import { getCollection } from 'astro:content';
import NewsCard from './cards/NewsCard.astro';
import NewsViewer from './NewsViewer.astro';

// Accept defaultCount as a prop with a default value of 2
const { defaultCount = 2 } = Astro.props;

// Load news posts from content collection
const allNewsPosts = await getCollection('news');

// Process posts and sort by date
const postsArray = allNewsPosts
  .map(post => ({
    ...post.data,
    slug: post.slug,
    date: post.data.date ? new Date(post.data.date) : new Date(0)
  }))
  .sort((a, b) => b.date.getTime() - a.date.getTime());

// Get the default number of posts to display
const visiblePosts = postsArray.slice(0, defaultCount);
---

<section class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 my-12">
  <h2 class="text-3xl font-semibold mb-8 text-gray-800 dark:text-white">Latest News</h2>
  
  <div id="news-container">
    {visiblePosts.map((post) => (
      <NewsCard post={post} />
    ))}
  </div>
  
  <div id="all-news-container" class="hidden">
    {postsArray.map((post) => (
      <NewsCard post={post} />
    ))}
  </div>
  
  <div class="text-center mt-8">
    <button 
      id="view-all-news-btn"
      class="px-5 py-2 bg-emberBlue-500 hover:bg-emberBlue-600 text-white rounded-lg transition-all duration-300 inline-block hover:-translate-y-1"
    >
      View All News
    </button>
  </div>
  
  <!-- Include the NewsViewer component -->
  <NewsViewer />
</section>

<script>
  document.addEventListener('DOMContentLoaded', initNewsSystem);
  document.addEventListener('astro:page-load', initNewsSystem);

  function initNewsSystem() {
    // Get the modal element
    const modal = document.getElementById('news-modal');
    if (!modal) return;
    
    // Get the close button
    const closeBtn = document.getElementById('close-modal-btn');
    
    // Get all news cards
    const newsCards = document.querySelectorAll('.news-card');
    
    // Get the "View All News" button
    const viewAllBtn = document.getElementById('view-all-news-btn');
    
    // Get the containers
    const defaultContainer = document.getElementById('news-container');
    const allNewsContainer = document.getElementById('all-news-container');
    
    // Function to show a specific news item
    function showNewsItem(slug) {
      if (!modal) return;
      
      // Hide all news content
      document.querySelectorAll('.news-content').forEach(content => {
        content.classList.add('hidden');
      });
      
      // Show the selected news content
      const selectedContent = document.getElementById(`news-content-${slug}`);
      if (selectedContent) {
        selectedContent.classList.remove('hidden');
        
        // Show the modal
        modal.showModal();
      }
    }
    
    // Function to close the modal
    function closeModal() {
      if (modal) {
        modal.close();
      }
    }
    
    // Function to toggle between default and all news views
    function toggleAllNews() {
      const isShowingAll = viewAllBtn.textContent.trim() === 'Show Less';
      
      if (isShowingAll) {
        // Switch back to default view
        defaultContainer.classList.remove('hidden');
        allNewsContainer.classList.add('hidden');
        viewAllBtn.textContent = 'View All News';
      } else {
        // Switch to all news view
        defaultContainer.classList.add('hidden');
        allNewsContainer.classList.remove('hidden');
        viewAllBtn.textContent = 'Show Less';
      }
    }
    
    // Add click event listeners to news cards
    newsCards.forEach(card => {
      // Handle card click
      card.addEventListener('click', (e) => {
        // Only handle clicks on the card itself, not on the "Read more" button
        if (!e.target.closest('.view-news-btn')) {
          const slug = card.dataset.slug;
          if (slug) {
            showNewsItem(slug);
          }
        }
      });
      
      // Handle "Read more" button click
      const readMoreBtn = card.querySelector('.view-news-btn');
      if (readMoreBtn) {
        readMoreBtn.addEventListener('click', (e) => {
          e.stopPropagation(); // Prevent the card click handler from firing
          const slug = card.dataset.slug;
          if (slug) {
            showNewsItem(slug);
          }
        });
      }
    });
    
    // Add click event listener to "View All News" button
    if (viewAllBtn) {
      viewAllBtn.addEventListener('click', toggleAllNews);
    }
    
    // Add click event listener to close button
    if (closeBtn) {
      closeBtn.addEventListener('click', closeModal);
    }
    
    // Close modal when clicking outside the content
    if (modal) {
      modal.addEventListener('click', (e) => {
        const rect = modal.getBoundingClientRect();
        const isInDialog = (rect.top <= e.clientY && e.clientY <= rect.top + rect.height &&
                           rect.left <= e.clientX && e.clientX <= rect.left + rect.width);
        if (!isInDialog) {
          closeModal();
        }
      });
    }
    
    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && modal.open) {
        closeModal();
      }
    });
  }
</script>
