---
// src/components/layout/Navbar.astro
const currentPath = Astro.url.pathname;

// central link registry – one edit = everywhere
const navLinks = [
  { href: "/",            label: "Home"          },
  { href: "/people",      label: "People"        },
  { href: "/publications",label: "Publications"  },
  { href: "/research",    label: "Research"      },
  { href: "/robots",      label: "Robots"        },
  { href: "/contact",     label: "Contact"       },
];

// build‑time helper so initial HTML ships with correct active classes
function isActive(path) {
  const full = path;
  return currentPath === full || currentPath === full + "/";
}
---

<nav id="navbar"
     class="fixed top-2 left-1/2 -translate-x-1/2 z-50 w-full max-w-6xl
            bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border
            border-gray-100 dark:border-gray-700 rounded-xl shadow-ember
            theme-transition"
     transition:persist transition:animate="none">

  <!-- row: logo + desktop nav + toggles -->
  <div class="px-8 py-1 flex items-center justify-between">
    <a href={"/"} class="flex items-center space-x-3 group">
      <div class="w-10 h-10 bg-gradient-to-r from-emberGreen-500 to-emberBlue-500
                  rounded-full flex items-center justify-center shadow-lg">
        <!-- <span class="text-white font-bold">E</span> -->
        <!-- <img src={"/images/ember_icon.webp"} alt="EMBER Lab Logo" class="w-8 h-8 object-cover" /> -->
        <img src={"/images/logo/logo_3.png"} alt="EMBER Lab Logo" class="w-11 h-11 object-cover" />

      </div>
      <span class="text-xl font-bold text-gradient">EMBER Lab</span>
    </a>

    <!-- desktop links -->
    <ul class="hidden md:flex space-x-8 text-lg">
      {navLinks.map(link => (
        <li><a href={link.href}
               class={`nav-link px-4 py-2 transition-standard ${isActive(link.href)
                 ? 'text-emberGreen-500 dark:text-emberGreen-300'
                 : 'text-gray-600 dark:text-gray-300'}`}>{link.label}</a></li>
      ))}
    </ul>

    <!-- toggles -->
    <div class="flex items-center space-x-2">
      <!-- theme -->
      <button 
        id="theme-toggle"
        class="p-2 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-standard"
        aria-label="Toggle dark mode"
        onclick="window.toggleTheme()">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 block dark:hidden text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
      </button>
      <!-- hamburger -->
      <button 
        id="mobile-menu-button" 
        class="md:hidden p-2 rounded-md text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
        aria-label="Toggle mobile menu"
        aria-expanded="false">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
  </div>

  <!-- mobile menu -->
  <div id="mobile-menu"
       class="hidden md:hidden px-4 py-2 pb-3 bg-white/95 dark:bg-gray-800/95
              rounded-b-xl border-t border-gray-100 dark:border-gray-700 theme-transition">
    <ul class="space-y-1">
      {navLinks.map(link => (
        <li><a href={link.href}
               class={`block py-2 px-4 rounded-lg ${isActive(link.href)
                 ? 'text-emberGreen-500 dark:text-emberGreen-300'
                 : 'text-gray-600 dark:text-gray-300 hover:text-emberGreen-500 dark:hover:text-emberGreen-300'}`}>{link.label}</a></li>
      ))}
    </ul>
  </div>
</nav>

<!-- ========== JS (keeps your original behaviour) ========== -->
<script>
  // rebuild mobile toggle listener each swap (prevents duplicates w/o cloneNode)
  function setupMobileMenu() {
    const btn = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');
    if (!btn || !menu) return;
    btn.onclick = (e) => {
      e.stopPropagation();
      const open = btn.getAttribute('aria-expanded') === 'true';
      menu.classList.toggle('hidden');
      btn.setAttribute('aria-expanded', (!open).toString());
    };
  }

  // active‑link swap (client) – mirrors build‑time isActive
  function updateActive() {
    const cur = window.location.pathname;
    document.querySelectorAll('#navbar a').forEach(a => {
      const active = cur === a.pathname || cur === a.pathname + '/';
      a.classList.toggle('text-emberGreen-500', active);
      a.classList.toggle('dark:text-emberGreen-300', active);
      a.classList.toggle('text-gray-600', !active);
      a.classList.toggle('dark:text-gray-300', !active);
    });
  }

  // click outside & Esc to close
  function globalCloseHandlers() {
    const btn = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');
    if (!btn || !menu) return;
    document.addEventListener('click', (e) => {
      if (!menu.contains(e.target) && !btn.contains(e.target)) {
        menu.classList.add('hidden');
        btn.setAttribute('aria-expanded', 'false');
      }
    });
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        menu.classList.add('hidden');
        btn.setAttribute('aria-expanded', 'false');
      }
    });
  }

  // init on load + every SPA swap
  function init() {
    setupMobileMenu();
    updateActive();
    if (!window._emberNavOnce) { globalCloseHandlers(); window._emberNavOnce = true; }
  }

  document.addEventListener('DOMContentLoaded', init);
  document.addEventListener('astro:page-load', init);
  document.addEventListener('astro:after-swap', updateActive);
</script>
